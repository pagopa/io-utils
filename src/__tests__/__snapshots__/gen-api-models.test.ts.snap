// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gen-api-models should generate a dictionary from additionalProperties: additional-properties 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

// additional attributes

export const AdditionalPropsTest = t.dictionary(
  t.string,

  t.readonlyArray(t.number, \\"array of number\\"),

  \\"AdditionalPropsTest\\"
);

export type AdditionalPropsTest = t.TypeOf<typeof AdditionalPropsTest>;
"
`;

exports[`gen-api-models should generate a dictionary from additionalProperties: true: additional-properties-true 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

// additional attributes

export const AdditionalPropsTrueTest = t.dictionary(
  t.string,
  t.any,
  \\"AdditionalPropsTrueTest\\"
);

export type AdditionalPropsTrueTest = t.TypeOf<typeof AdditionalPropsTrueTest>;
"
`;

exports[`gen-api-models should generate a type intersection from allOf: all-of-test 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { Message } from \\"./Message\\";
import { PaginationResponse } from \\"./PaginationResponse\\";

// required attributes
const AllOfTest1R = t.interface({});

// optional attributes
const AllOfTest1O = t.partial({
  items: t.readonlyArray(Message, \\"array of Message\\")
});

export const AllOfTest1 = t.intersection(
  [AllOfTest1R, AllOfTest1O],
  \\"AllOfTest1\\"
);

export type AllOfTest1 = t.TypeOf<typeof AllOfTest1>;

export const AllOfTest = t.intersection(
  [AllOfTest1, PaginationResponse],
  \\"AllOfTest\\"
);

export type AllOfTest = t.TypeOf<typeof AllOfTest>;
"
`;

exports[`gen-api-models should generate a type union from allOf when x-one-of is used: allofoneof-test 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { Message } from \\"./Message\\";
import { PaginationResponse } from \\"./PaginationResponse\\";

/**
 * test if we can use allOf as oneOf
 */

// required attributes
const AllOfOneOfTest1R = t.interface({});

// optional attributes
const AllOfOneOfTest1O = t.partial({
  items: t.readonlyArray(Message, \\"array of Message\\")
});

export const AllOfOneOfTest1 = t.intersection(
  [AllOfOneOfTest1R, AllOfOneOfTest1O],
  \\"AllOfOneOfTest1\\"
);

export type AllOfOneOfTest1 = t.TypeOf<typeof AllOfOneOfTest1>;

export const AllOfOneOfTest = t.union(
  [AllOfOneOfTest1, PaginationResponse],
  \\"AllOfOneOfTest\\"
);

export type AllOfOneOfTest = t.TypeOf<typeof AllOfOneOfTest>;
"
`;

exports[`gen-api-models should generate a type union from oneOf: oneof-test 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

// required attributes
const OneOfTest1R = t.interface({});

// optional attributes
const OneOfTest1O = t.partial({
  limited: t.boolean
});

export const OneOfTest1 = t.intersection(
  [OneOfTest1R, OneOfTest1O],
  \\"OneOfTest1\\"
);

export type OneOfTest1 = t.TypeOf<typeof OneOfTest1>;

// required attributes
const OneOfTest2R = t.interface({});

// optional attributes
const OneOfTest2O = t.partial({
  unlimited: t.boolean
});

export const OneOfTest2 = t.intersection(
  [OneOfTest2R, OneOfTest2O],
  \\"OneOfTest2\\"
);

export type OneOfTest2 = t.TypeOf<typeof OneOfTest2>;

export const OneOfTest = t.union([OneOfTest1, OneOfTest2], \\"OneOfTest\\");

export type OneOfTest = t.TypeOf<typeof OneOfTest>;
"
`;

exports[`gen-api-models should generate the operator definition 1`] = `
"
    /****************************************************************
     * testAuthBearer
     */

    // Request type definition
    export type TestAuthBearerT = r.IGetApiRequestType<{readonly bearerToken: string,readonly qo?: string,readonly qr: string}, \\"Authorization\\", never, r.IResponseType<200, undefined>|r.IResponseType<403, undefined>>;
  
        // Decodes the success response with a custom success type
        export function testAuthBearerDecoder<A, O>(type: t.Type<A, O>) { return r.composeResponseDecoders(r.ioResponseDecoder<200, (typeof type)[\\"_A\\"], (typeof type)[\\"_O\\"]>(200, type), r.constantResponseDecoder<undefined, 403>(403, undefined)); }

        // Decodes the success response with the type defined in the specs
        export const testAuthBearerDefaultDecoder = () => testAuthBearerDecoder(t.undefined);"
`;

exports[`gen-api-models should handle CustomStringFormats: custom-string-format 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { SomeCustomStringType as SomeCustomStringTypeT } from \\"italia-ts-commons/lib/string\\";
import * as t from \\"io-ts\\";

export type CustomStringFormatTest = t.TypeOf<typeof CustomStringFormatTest>;
export const CustomStringFormatTest = SomeCustomStringTypeT;
"
`;

exports[`gen-api-models should handle NonNegativeIntegers: non-negative-integer 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { NonNegativeInteger } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type NonNegativeIntegerTest = t.TypeOf<typeof NonNegativeIntegerTest>;
export const NonNegativeIntegerTest = NonNegativeInteger;
"
`;

exports[`gen-api-models should handle NonNegativeNumbers: non-negative-numbers 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { NonNegativeNumber } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type NonNegativeNumberTest = t.TypeOf<typeof NonNegativeNumberTest>;
export const NonNegativeNumberTest = NonNegativeNumber;
"
`;

exports[`gen-api-models should handle WithinRangeIntegers: within-range-integer 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { WithinRangeInteger } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type WithinRangeIntegerTest = t.TypeOf<typeof WithinRangeIntegerTest>;
export const WithinRangeIntegerTest = WithinRangeInteger(0, 10);
"
`;

exports[`gen-api-models should handle WithinRangeNumbers: within-range-numbers 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { WithinRangeNumber } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type WithinRangeNumberTest = t.TypeOf<typeof WithinRangeNumberTest>;
export const WithinRangeNumberTest = WithinRangeNumber(0, 10);
"
`;

exports[`gen-api-models should handle WithinRangeStrings: within-range-strings 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { WithinRangeString } from \\"italia-ts-commons/lib/strings\\";
import * as t from \\"io-ts\\";

export type WithinRangeStringTest = t.TypeOf<typeof WithinRangeStringTest>;
export const WithinRangeStringTest = WithinRangeString(10, 11);
"
`;

exports[`gen-api-models should handle enums: enum-simple 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { enumType } from \\"italia-ts-commons/lib/types\\";

export enum StatusEnum {
  \\"value1\\" = \\"value1\\",

  \\"value2\\" = \\"value2\\",

  \\"value3\\" = \\"value3\\"
}

// required attributes
const EnumTestR = t.interface({});

// optional attributes
const EnumTestO = t.partial({
  status: enumType<StatusEnum>(StatusEnum, \\"status\\")
});

export const EnumTest = t.intersection([EnumTestR, EnumTestO], \\"EnumTest\\");

export type EnumTest = t.TypeOf<typeof EnumTest>;
"
`;

exports[`gen-api-models should include aliases for types already defined elsewhere if they have a different name: defined-type 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { OrganizationFiscalCode as OrganizationFiscalCodeT } from \\"italia-ts-commons/lib/string\\";
import * as t from \\"io-ts\\";

export type OrganizationFiscalCodeTest = t.TypeOf<
  typeof OrganizationFiscalCodeTest
>;
export const OrganizationFiscalCodeTest = OrganizationFiscalCodeT;
"
`;

exports[`gen-api-models should not generate duplicate imports: dup-imports 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { EmailAddress } from \\"./EmailAddress\\";
import { FiscalCode } from \\"./FiscalCode\\";
import { IsInboxEnabled } from \\"./IsInboxEnabled\\";
import { IsWebhookEnabled } from \\"./IsWebhookEnabled\\";
import { PreferredLanguages } from \\"./PreferredLanguages\\";
import * as t from \\"io-ts\\";

/**
 * Describes the user's profile.
 */

// required attributes
const ProfilePayloadR = t.interface({});

// optional attributes
const ProfilePayloadO = t.partial({});

export const ProfilePayload = t.intersection(
  [ProfilePayloadR, ProfilePayloadO],
  \\"ProfilePayload\\"
);

export type ProfilePayload = t.TypeOf<typeof ProfilePayload>;

// required attributes
const ProfileR = t.interface({
  family_name: t.string,

  fiscal_code: FiscalCode,

  has_profile: t.boolean,

  is_email_set: t.boolean,

  name: t.string,

  version: t.Integer
});

// optional attributes
const ProfileO = t.partial({
  email: EmailAddress,

  is_inbox_enabled: IsInboxEnabled,

  is_webhook_enabled: IsWebhookEnabled,

  preferred_email: EmailAddress,

  preferred_languages: PreferredLanguages,

  payload: ProfilePayload
});

export const Profile = t.intersection([ProfileR, ProfileO], \\"Profile\\");

export type Profile = t.TypeOf<typeof Profile>;
"
`;

exports[`gen-api-models should parse custom inline properties: inline-property 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { PatternString } from \\"italia-ts-commons/lib/strings\\";

// required attributes
const InlinePropertyTestR = t.interface({});

// optional attributes
const InlinePropertyTestO = t.partial({
  inlineProp: PatternString(
    \\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\\"
  )
});

export const InlinePropertyTest = t.intersection(
  [InlinePropertyTestR, InlinePropertyTestO],
  \\"InlinePropertyTest\\"
);

export type InlinePropertyTest = t.TypeOf<typeof InlinePropertyTest>;
"
`;

exports[`gen-api-models should parse nested objects: nested-object 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { PatternString } from \\"italia-ts-commons/lib/strings\\";

// required attributes
const NestedObjectTestNestedObjectR = t.interface({});

// optional attributes
const NestedObjectTestNestedObjectO = t.partial({
  inlineProp: PatternString(
    \\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\\"
  )
});

export const NestedObjectTestNestedObject = t.intersection(
  [NestedObjectTestNestedObjectR, NestedObjectTestNestedObjectO],
  \\"NestedObjectTestNestedObject\\"
);

export type NestedObjectTestNestedObject = t.TypeOf<
  typeof NestedObjectTestNestedObject
>;

// required attributes
const NestedObjectTestR = t.interface({});

// optional attributes
const NestedObjectTestO = t.partial({
  inlineProp: PatternString(
    \\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\\"
  ),

  nestedObject: NestedObjectTestNestedObject
});

export const NestedObjectTest = t.intersection(
  [NestedObjectTestR, NestedObjectTestO],
  \\"NestedObjectTest\\"
);

export type NestedObjectTest = t.TypeOf<typeof NestedObjectTest>;
"
`;

exports[`gen-api-models should support additionalProperties default value: additional-properties-default 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { withDefault } from \\"italia-ts-commons/lib/types\\";

type AdditionalpropsDefaultBase = t.TypeOf<typeof AdditionalpropsDefaultBase>;
const AdditionalpropsDefaultBase = t.dictionary(
  t.string,

  t.readonlyArray(t.number, \\"array of number\\"),

  \\"AdditionalpropsDefault\\"
);

// additional attributes

export const AdditionalpropsDefault = withDefault(AdditionalpropsDefaultBase, {
  test: [1000]
} as AdditionalpropsDefaultBase);

export type AdditionalpropsDefault = t.TypeOf<typeof AdditionalpropsDefault>;
"
`;

exports[`gen-api-models should support file uploads 1`] = `
"
    /****************************************************************
     * testFileUpload
     */

    // Request type definition
    export type TestFileUploadT = r.IPostApiRequestType<{readonly file: { uri: string, name: string, type: string }}, \\"Content-Type\\", never, r.IResponseType<200, undefined>>;
  
        // Decodes the success response with a custom success type
        export function testFileUploadDecoder<A, O>(type: t.Type<A, O>) { return r.ioResponseDecoder<200, (typeof type)[\\"_A\\"], (typeof type)[\\"_O\\"]>(200, type); }

        // Decodes the success response with the type defined in the specs
        export const testFileUploadDefaultDecoder = () => testFileUploadDecoder(t.undefined);"
`;

exports[`gen-api-models should support generate requestbody 1`] = `
"
    /****************************************************************
     * testRequestBody
     */

    // Request type definition
    export type TestRequestBodyT = r.IPostApiRequestType<{readonly problem?: Problem}, \\"Content-Type\\", never, r.IResponseType<204, undefined>>;
  
        // Decodes the success response with a custom success type
        export function testRequestBodyDecoder<A, O>(type: t.Type<A, O>) { return r.ioResponseDecoder<204, (typeof type)[\\"_A\\"], (typeof type)[\\"_O\\"]>(204, type); }

        // Decodes the success response with the type defined in the specs
        export const testRequestBodyDefaultDecoder = () => testRequestBodyDecoder(t.undefined);"
`;

exports[`gen-api-models should support generate serializers 1`] = `
"
    /****************************************************************
     * testSerializer
     */

    // Request type definition
    export type TestSerializerT = r.IPostApiRequestType<{readonly qo?: string,readonly paginationRequest?: string}, \\"Content-Type\\", never, r.IResponseType<200, Message>|r.IResponseType<403, Problem>>;
  
        // Decodes the success response with a custom success type
        export function testSerializerDecoder<A, O>(type: t.Type<A, O>) { return r.composeResponseDecoders(r.ioResponseDecoder<200, (typeof type)[\\"_A\\"], (typeof type)[\\"_O\\"]>(200, type), r.ioResponseDecoder<403, (typeof Problem)[\\"_A\\"], (typeof Problem)[\\"_O\\"]>(403, Problem)); }

        // Decodes the success response with the type defined in the specs
        export const testSerializerDefaultDecoder = () => testSerializerDecoder(Message);"
`;
