{% macro exportConst(defaultValue, type, typedef, quote = false) %}
  import * as t from "io-ts";
  {% if defaultValue !== undefined %}
    {% set typeName = type + "Base" %}
    {% set q = '"' if quote else "" %}
    import { withDefault } from "italia-ts-commons/lib/types";

    export type {{ type }} = t.TypeOf<typeof {{ typeName }}>;

    const {{ typeName }} = {{ typedef | safe }};

    export const {{ type }} = withDefault({{ typeName }}, {{ q | safe }}{{ defaultValue }}{{ q | safe }} as {{ type }});

  {% else %}
    export type {{ type }} = t.TypeOf<typeof {{ type }}>;

    export const {{ type }} = {{ typedef | safe }};
  {% endif %}
{% endmacro %}

{% macro importLocalProp(realPropName) -%}
{%- if not (realPropName | isSeen) -%}
{{- realPropName | rememberSeen -}}
import { {{ realPropName }} } from "./{{ realPropName }}";
{%- endif -%}
{% endmacro %}


{% macro defineObjectProperty(prop, propName) -%}
  {%-
    if prop.$ref %}{%
      set realPropType = prop.$ref | replace("#/definitions/", "") %}{%
    elif prop.type == "array" and prop.items.$ref %}{%
      set realPropType %}t.readonlyArray({{ prop.items.$ref | replace("#/definitions/", "") }}){% endset %}{%
    else %}{%
      set realPropType %}t.{{ prop.type | replace("integer", "number") }}{% endset %}{%
    endif
  %}
  {% set q = '"' if prop.type == "string" else "" %}
  {% set pds = "withDefault(" if prop.default !== undefined else "" %}
  {% set pde = ", " + q + prop.default + q + ")" if prop.default !== undefined else "" %}
  {% if propName %}{{ propName }}:{% endif %} {{ pds | safe }}{{ realPropType | safe }}{{ pde | safe }},
{% endmacro %}
